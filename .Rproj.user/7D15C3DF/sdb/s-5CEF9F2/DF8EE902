{
    "contents" : "#' PPI network from STRING\n#' \n#' Constructing protenin-protein interaction network from STRING database, when \n#' STRING contains gene names from gene expression platform, like Saccharomyces \n#' cerevisiae\n#' \n#' @param pvalues A N-dimensional vector of gene expression level, processed by limma\n#' @param GeneNames A N-dimensional vector of gene symbols, pre-filtering by expression profiles\n#' @param STRINGfilename The file downloaded from STRING, like 4932.protein.links.v10.txt\n#' @param STRINGTheta The threshold for PPI edges selections when using STRING \n#' @param savename The file to save filtered gene symbols and network edgelist\n#' \n#' @return net two or three column edge list for \\code{\\link{NetSimplify}} or \n#' \\code{\\link{PPIplot}} and p-values vector.\n#' \n#' @author Dong Li, \\email{dxl466@cs.bham.ac.uk}\n#' @keywords STRING PPINet\n#' \n#' \nPPIFromString <- function(pvalues, GeneNames, STRINGfilename, STRINGTheta = 0, savename){\n    ##PPI pairs from STRING, protein name start with ENSPxxxx\n    cat('Reading edge list from STRING...\\n')\n    PPI=read.delim(STRINGfilename,sep=' ')\n    selectedrow = which(PPI[,3] >= STRINGTheta)\n    PPI = PPI[selectedrow,]\n    septag = strsplit(STRINGfilename,'.',fixed = TRUE)[[1]][1]\n    linkssource = gsub(paste(septag,'.',sep=''),'',PPI[,1])\n    linkstarget = gsub(paste(septag,'.',sep=''),'',PPI[,2])\n    selectedp = union(linkssource,linkstarget)\n\n    ##Matching gene names for further gene filtering\n    cat('Filtering genes...\\n')\n    selectedgenes = intersect(selectedp,GeneNames)  \n    furtherselectedrows = match(selectedgenes,GeneNames)\n    GeneNames = GeneNames[furtherselectedrows]\t\n    pvalues = pvalues[furtherselectedrows]\n\n    ##Network construction\n    cat('Matching gene names and constructing...\\n')\n    net = matrix(0,nrow = dim(PPI)[1], ncol=3)\n    j = 1\n    for (i in 1:dim(PPI)[1]) {\n    if (is.element(linkssource[i], GeneNames) && is.element(linkstarget[i], GeneNames)){\n        net[j,1] = match(linkssource[i],GeneNames)\n        net[j,2] = match(linkstarget[i],GeneNames)\n        net[j,3] = PPI[i,3]\n        j = j+1\n    }\n    }\n    net = net[1:(j-1),]\n    cat('Saving files...\\n')\n    #save(net,GeneNames,pvalues,file = paste(savename,'.RData',sep=''))\n    write.table(pvalues, paste(savename,'Pvalues.dat',sep=''), row.names = FALSE, \n                col.names = FALSE, sep=\"\\t\")\n    write.table(GeneNames, paste(savename,'GeneNames.dat',sep=''), \n                row.names = FALSE, col.names = FALSE,sep=\"\\t\",quote = FALSE)\n    names(pvalues) = GeneNames\n    return (list(net = net,p.values = pvalues))\n}\n\n#' PPI network from STRING and Ensembl\n#' \n#' Constructing protenin-protein interaction network from STRING database, when \n#' protein name is needed for mapping with gene name from Ensembl\n#' \n#' @param pvalues A N-dimensional vector of gene expression level, processed by limma\n#' @param GeneNames A N-dimensional vector of gene symbols, pre-filtering by expression profiles\n#' @param STRINGfilename The file downloaded from STRING, like 9606.protein.links.v10.txt\n#' @param STRINGTheta The threshold for PPI edges selections when using STRING \n#' @param Ensemblfilename The file downloaded from ensembl (Customise your download), \n#' like mart_export.txt, first column is Associated Gene Name like MT-ND1, \n#' second column is Ensembl Protein ID like ENSP00000354687\n#' @param savename The file to save filtered gene symbols and network edgelist\n#' \n#' @return net two or three column edge list for \\code{\\link{NetSimplify}} or \n#' \\code{\\link{PPIplot}} and p-values vector. \n#' \n#' @author Dong Li, \\email{dxl466@cs.bham.ac.uk}\n#' @keywords STRING Ensembl PPINet\n#' \n#' \nPPIFromStringEnsembl <- function(pvalues, GeneNames, STRINGfilename, STRINGTheta = 0, \n                                 Ensemblfilename, savename){\n    ##PPI pairs from STRING, protein name start with ENSPxxxx\n    cat('Reading edge list from STRING...\\n')\n    PPI=read.delim(STRINGfilename,sep=' ')\n    selectedrow = which(PPI[,3] >= STRINGTheta)\n    PPI = PPI[selectedrow,]\n    septag = strsplit(STRINGfilename,'.',fixed = TRUE)[[1]][1]\n    linkssource = gsub(paste(septag,'.',sep=''),'',PPI[,1])\n    linkstarget = gsub(paste(septag,'.',sep=''),'',PPI[,2])\n    selectedp = union(linkssource,linkstarget)\n    \n    ## Mapping from Ensembl.Protein.ID ENSPxxxx to Associated.Gene.Name C20orf144\n    cat('Mapping gene names from Ensembl...\\n')\n    maps = read.delim(Ensemblfilename, sep='\\t')\n    maps = maps[!(is.na(maps[,1])|maps[,2]==\"\"), ]\n    selectedp = intersect(selectedp,maps[,2])\n    selectedmapsrow = match(selectedp,maps[,2])\n    maps = maps[selectedmapsrow,]\n    interg = intersect(GeneNames,maps[,1])\n\n    selectedmapsrow = match(interg,maps[,1])\n    maps = maps[selectedmapsrow,]\n    selectedp = maps[,2]\t\n    \n    ##Matching gene names for further gene filtering\n    cat('Filtering genes...\\n')\n    selectedgenes = match(interg,GeneNames)  \n    GeneNames = GeneNames[selectedgenes]    \n    pvalues = pvalues[selectedgenes]\n    \n    ##Network construction\n    cat('Matching gene names and constructing...\\n')\n    net = matrix(0,nrow = dim(PPI)[1], ncol=3)\n    j = 1\n    for (i in 1:dim(PPI)[1]) {\n        if (is.element(linkssource[i], selectedp) && is.element(linkstarget[i], selectedp)){\n            ipg1 = maps[which(maps[,2] == linkssource[i]),1]\n            net[j,1] = match(ipg1,GeneNames)\n            ipg2 = maps[which(maps[,2] == linkstarget[i]),1]\n            net[j,2] = match(ipg2,GeneNames)\n            net[j,3] = PPI[i,3]\n            j = j+1\n        }\n    }\n    net = net[1:(j-1),]\n    cat('Saving files...\\n')\n    #save(net,GeneNames,pvalues,file = paste(savename,'.RData',sep=''))\n    write.table(pvalues, paste(savename,'Pvalues.dat',sep=''), row.names = FALSE, \n                col.names = FALSE, sep=\"\\t\")\n    write.table(GeneNames, paste(savename,'GeneNames.dat',sep=''), \n                row.names = FALSE, col.names = FALSE,sep=\"\\t\",quote = FALSE)\n    names(pvalues) = GeneNames\n    return (list(net = net,p.values = pvalues))\n}\n\n#' PPI network from BioGRID\n#' \n#' Constructing protenin-protein interaction network from BioGRID database\n#' \n#' @param pvalues A N-dimensional vector of gene expression level, processed by limma\n#' @param GeneNames A N-dimensional vector of gene symbols, pre-filtering by expression profiles\n#' @param BioGRIDfilename The file downloaded from BioGRID, like \n#' BIOGRID-ORGANISM-Homo_sapiens-3.4.138.tab.txt\n#' @param savename The file to save filtered gene symbols and network edgelist\n#' @param column1 Source column in BioGRID file, for Saccharomyces_cerevisiae \n#' column1=1 and for Homo_sapiens column1=3\n#' @param column2 Target column in BioGRID file, for Saccharomyces_cerevisiae \n#' column2=2 and for Homo_sapiens column3=4\n#' \n#' @return net two or three column edge list for \\code{\\link{NetSimplify}} or \n#' \\code{\\link{PPIplot}} and p-values vector. \n#' \n#' @author Dong Li, \\email{dxl466@cs.bham.ac.uk}\n#' @keywords BioGRID PPINet\n#' \n#' \nPPIFromBioGRID <- function(pvalues, GeneNames, BioGRIDfilename, savename, \n                           column1,column2){\n    ##PPI pairs from STRING, protein name start with ENSPxxxx\n    cat('Reading edge list from STRING...\\n')\n    PPI=read.delim(BioGRIDfilename,skip=35)\n    links = PPI[,c(column1,column2)]\n    linkssource = PPI[,column1]\n    linkstarget = PPI[,column2]\n    selectedp = union(links[,1],links[,2])\n    \n    selectedgenes = intersect(selectedp,GeneNames)\n    \n    ##Matching gene names for further gene filtering\n    cat('Filtering genes...\\n')\n    selectedgenes = match(selectedgenes,GeneNames)  \n    GeneNames = GeneNames[selectedgenes]    \n    pvalues = pvalues[selectedgenes]\n    \n    ##Network construction\n    cat('Matching gene names and constructing...\\n')\n    net = matrix(0,nrow = dim(PPI)[1], ncol=2)\n    j = 1\n#     edges <- links[,1] %in% GeneNames & links[,2] %in% GeneNames\n#     net <- links[edges,]\n    for (i in 1:dim(PPI)[1]) {\n        if (is.element(linkssource[i], GeneNames) && is.element(linkstarget[i], GeneNames)){\n            net[j,1] = match(linkssource[i],GeneNames)\n            net[j,2] = match(linkstarget[i],GeneNames)\n            j = j + 1\n        }\n    }\n    net = net[1:(j-1),]\n    cat('Saving files...\\n')\n    #save(net,GeneNames,pvalues,file = paste(savename,'.RData',sep=''))\n    write.table(pvalues, paste(savename,'Pvalues.dat',sep=''), row.names = FALSE, \n                col.names = FALSE, sep=\"\\t\")\n    write.table(GeneNames, paste(savename,'GeneNames.dat',sep=''), \n                row.names = FALSE, col.names = FALSE,sep=\"\\t\",quote = FALSE)\n    names(pvalues) = GeneNames\n    return (list(net = net,p.values = pvalues))\n}\n\n#' PPI network simplification\n#' \n#' Simplify protenin-protein interaction network, for module identification\n#' \n#' @param net Edgelist from \\code{\\link{PPIFromString}}, \n#' \\code{\\link{PPIFromStringEnsembl}} and \\code{\\link{PPIFromBioGRID}}\n#' @param p.values The p-values vector\n#' @param savename Name for saving PPI edge list as plain file and also saving \n#' nodes in largest connected component and figure as eps format by default\n#' \n#' @return a list containing module size, best score, module as a list of nodes\n#' \n#' @seealso \\code{\\link{PPIFromString}}, \\code{\\link{PPIFromStringEnsembl}} \n#' and \\code{\\link{PPIFromBioGRID}}\n#' \n#' @author Dong Li, \\email{dxl466@cs.bham.ac.uk}\n#' @keywords STRING CONSTRUCTION\n#' \n#' @examples\n#' require(genalg)\n#' Sp <- NetSimplify(net,0)\n#' GA_result <- GA_search_connected(lambda=0.5,Sp$node_score,Sp$edge_score,\n#' Sp$Edgelist,num_iter=1000, muCh=0.05, zToR=10, minsize=10)\n#' \nNetSimplify <- function(net, p.values, STRINGTheta = 0){\n    if (dim(net)[2] > 2 & STRINGTheta > 0)\n        net = net[which(net[,3] > STRINGTheta),]\n    GeneNames = names(p.values)\n    el = cbind(GeneNames[net[,1]],GeneNames[net[,2]])\n    #el = apply(net[,1:2], 2, as.character)\n    require(igraph)\n    g <- graph.edgelist(el, directed = FALSE)\n    sg = simplify(g)        \n    comps <- decompose.graph(sg,min.vertices=3)\n    \n    comps_edgelist = get.edgelist(comps[[1]], names=TRUE)\n    Escores = numeric(length = dim(comps_edgelist)[1])\n    if (dim(net)[2] == 3){\n        edges <- comps_edgelist[,1] %in% GeneNames & comps_edgelist[,2] %in% GeneNames\n        Escores = net[edges,3]\n        Escores = Escores/max(Escores)\n    }\n    compsids = match(V(comps[[1]])$name,GeneNames)\n    Nscores = p.values[compsids]\n    names(Nscores) = GeneNames[compsids]\n    return (list(node_score = Nscores, edge_score = Escores, \n                 Edgelist = comps_edgelist))\n}\n\n#' PPI network visulization\n#' \n#' Plot protenin-protein interaction network by igraph\n#' \n#' @param net Edgelist from \\code{\\link{PPIFromString}}, \n#' \\code{\\link{PPIFromStringEnsembl}} and \\code{\\link{PPIFromBioGRID}}\n#' @param STRINGTheta The threshold for PPI edges selections when using STRING \n#' @param savename Name for saving PPI edge list as plain file and also saving \n#' nodes in largest connected component and figure as eps format by default\n#' \n#' @author Dong Li, \\email{dxl466@cs.bham.ac.uk}\n#' @keywords STRING CONSTRUCTION\n#' \n#' \nPPIplot <- function(net, STRINGTheta = 0, savename){\n    if (dim(net)[2] > 2 & STRINGTheta > 0)\n        net = net[which(net[,3] > STRINGTheta),1:2]\n    el = apply(net[,1:2], 2, as.character)\n    require(igraph)\n    g <- graph.edgelist(el, directed = FALSE)\n    sg = simplify(g)\n    comps <- decompose.graph(sg,min.vertices=3)\n    comps_edgelist = get.edgelist(sg, names=TRUE)\n    write.table(comps_edgelist, file = paste(savename,'Edgelist.dat',sep=''), \n                row.names = FALSE, col.names = FALSE,sep=\"\\t\",quote = FALSE)\n    write.table(V(comps[[1]])$name, file = paste(savename,'Compnent.dat',sep=''), \n                row.names = FALSE, col.names = FALSE, sep=\"\\t\", quote = FALSE)\n    postscript(paste(savename,'.eps',sep=''), fonts=c(\"serif\", \"Palatino\"))\n    plot(comps[[1]],edge.width=0.1,vertex.label = NA,vertex.size=0.5)\n    dev.off()\n}",
    "created" : 1468664101528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3268948164",
    "id" : "DF8EE902",
    "lastKnownWriteTime" : 1469294945,
    "path" : "D:/Code/Bioconductor/PPINet/R/PPIConstruction.R",
    "project_path" : "R/PPIConstruction.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}